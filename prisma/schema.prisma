// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  password String
  token String 
  createdAt DateTime @default(now())

  sentMessages    Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  user Friendship[] @relation("user")
  friend Friendship[] @relation("friend")
  sentFriendRequests FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
}

model Friendship {
  id Int @id @default(autoincrement())
  userId Int 
  friendId Int 
  friendshipEstablished Boolean @default(false)
  user User @relation("user", fields: [userId], references: [id])
  friend User @relation("friend", fields: [friendId], references: [id])
  createdAt DateTime @default(now())

    @@unique([userId, friendId])
}

model Message {
  id Int @id @default(autoincrement())
  data String?
  messageType MessageType @default(TEXT)
  senderId Int
  sender User @relation("SentMessages",fields: [senderId] , references: [id])
  receiverId Int
  receiver User @relation("ReceivedMessages",fields: [receiverId] , references: [id])
  createdAt DateTime @default(now())

}

enum MessageType {
  TEXT
  IMAGE
  VOICE
  VIDEO
}

model FriendRequest {
  id Int @id @default(autoincrement())
  senderId Int
  ReceiverId Int
  sender User @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver User @relation("ReceivedFriendRequests", fields: [ReceiverId], references: [id])
  createdAt DateTime @default(now())

  @@unique([senderId, ReceiverId])
}